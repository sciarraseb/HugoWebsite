0.08823529*680
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE, language = "r")
#specify parameters for parameter table
theta <- 3
alpha <- 3 + .32*1
beta <- 180
gamma <- 20
sd_alpha <- 0.05
sd_theta <- 0.05
sd_beta <- 10
sd_gamma <- 4
sd_error <- 0.05
#table of parameter values
parameterValues_df <- data.frame('Parameter Means' = c(
'Baseline, $\\theta$',
'Maximal elevation, $\\alpha$',
'Days-to-halfway elevation, $\\upbeta$',
'Triquarter-halfway delta, $\\upgamma$',
'Variability and Covariability Parameters (in Standard Deviations)',
'Baseline standard deviation, $\\uppsi_{\\uptheta}$',
'Maximal elevation standard deviation, $\\uppsi_{\\upalpha}$',
'Days-to-halfway elevation standard deviation, $\\uppsi_{\\upbeta}$',
'Triquarter-halfway delta standard deviation, $\\uppsi_{\\upgamma}$',
'Baseline-maximal elevation covariability, $\\uppsi_{\\uptheta\\upalpha}$',
'Baseline-days-to-halfway elevation covariability, $\\uppsi_{\\uptheta\\upbeta}$',
'Baseline-triquarter-halfway delta covariability, $\\uppsi_{\\uptheta\\upgamma}$',
'Maximal elevation-days-to-halfway elevation covariability, $\\uppsi_{\\upalpha\\upbeta}$',
'Maximal elevation-triquarter-halfway delta covariability, $\\uppsi_{\\upalpha\\upgamma}$',
'Days-to-halfway elevation-triquarter-halfway delta covariability, $\\uppsi_{\\upbeta\\upgamma}$',
'Residual standard deviation, $\\uppsi_{\\upepsilon}$'),
'Value' = c( theta, alpha, beta, gamma,
'', sd_theta, sd_alpha, sd_beta, sd_gamma,
0, 0, 0, 0, 0,0,  sd_error), check.names = F)
#round numbers to that they print with two significant numbers
parameterValues_df$Value <- round(as.numeric(as.character(parameterValues_df$Value)), 3)
parameterValues_df$Value <- formatC(round(parameterValues_df$Value, 3), format='f', digits=2)
#replace '  NA' with empty string
parameterValues_df$Value[parameterValues_df$Value ==" NA"] <- ''
kbl(parameterValues_df, booktabs = TRUE, format = 'html',
align = c('l', 'c'),
caption = 'Values Used for Multilevel Logistic Function Parameters (see Table \\ref{tab:parameterValues})',
escape = F) %>%
add_indent(positions = c(1:4, 6:16), level_of_indent = 2) %>%
kable_styling(position = 'center') %>%
footnote(general =  "<em>Note</em>. The difference between $\\alpha$ and $\\theta$ corresponds to the 50$\\mathrm{^{th}}$ percentile Cohen's $d$ value of 0.32 in organizational psychology (Bosco et al., 2015). see Table \\ref{tab:parameterValues} and Figure \\ref{fig:gg-oz-plot1}.",  threeparttable = T,  escape = F, general_title = ' ') %>%
row_spec(row = 4, extra_css = 'padding-bottom: 1rem; border-bottom: 1.5px solid') %>%
row_spec(row = 5, extra_css = 'font-weight: bold; border-bottom: 1.5px solid')
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'RColorBrewer', 'parallel', 'data.table', 'kableExtra', 'ggtext', 'egg', 'papaja', 'shiny',
'ggbrace', 'cowplot', 'knitr', 'RefManageR', 'reticulate', 'gluedown', 'formatR')
libraries(packages)
#use_python(python = "/usr/local/bin/python3.9")
knitr::opts_chunk$set(comment = NA)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
kbl(parameterValues_df, booktabs = TRUE, format = 'html',
align = c('l', 'c'),
caption = 'Values Used for Multilevel Logistic Function Parameters (see Table \\ref{tab:parameterValues})',
escape = F) %>%
add_indent(positions = c(1:4, 6:16), level_of_indent = 2) %>%
kable_styling(position = 'center') %>%
footnote(general =  "<em>Note</em>. The difference between $\\alpha$ and $\\theta$ corresponds to the 50$\\mathrm{^{th}}$ percentile Cohen's $d$ value of 0.32 in organizational psychology (Bosco et al., 2015). see Table \\ref{tab:parameterValues} and Figure \\ref{fig:gg-oz-plot1}.",  threeparttable = T,  escape = F, general_title = ' ') %>%
row_spec(row = 4, extra_css = 'padding-bottom: 1rem; border-bottom: 1.5px solid') %>%
row_spec(row = 5, extra_css = 'font-weight: bold; border-bottom: 1.5px solid')
500/39
39/4
hugo serve
48.93/7
12*2100
8300/2100
8300- 2100
6200*12
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
remotes::install_github('rstudio/blogdown')
library(blogdown)
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
library(blogdown)
blogdown:::new_post_addin()
new_post(title = 'second_post', kind = 'technical_content.md/', open = T, author = 'Sebastian Sciarra', )
new_post(title = 'second_post', kind = 'technical_content.md', open = T, author = 'Sebastian Sciarra', )
new_post(subdir = 'content/technical_content', title = 'second_post', kind = 'technical_content.md\', open = T, author = 'Sebastian Sciarra')
new_post(subdir = 'content/technical_content', title = 'second_post', kind = 'technical_content.md', open = T, author = 'Sebastian Sciarra')
new_post(subdir = 'technical_content', title = 'second_post', kind = 'technical_content.md', open = T, author = 'Sebastian Sciarra')
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'RColorBrewer', 'parallel', 'data.table', 'kableExtra', 'ggtext', 'egg', 'papaja', 'shiny',
'ggbrace', 'cowplot', 'knitr', 'RefManageR', 'reticulate', 'gluedown', 'formatR')
libraries(packages)
#use_python(python = "/usr/local/bin/python3.9")
knitr::opts_chunk$set(comment = NA)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
(0.5)^4*(0.5)^6
0.5*10
0.5^10
0.0009765625*7
compute_binom_mass_density <- function(num_trials, prob_success, num_successes){
#computation of binomial term
num_success_patterns <- (factorial(num_trials)/(factorial(num_successes)*factorial(num_trials-num_successes)))
#computation of binomial term
prob_single_pattern <- (prob_success)^num_successes*(1-prob_success)^(num_trials-num_successes)
probability <- num_success_patterns*prob_single_pattern
pmf_df <- data.frame('probability' = probability,
'num_successes' = num_successes,
'prob_success' = prob_success,
'num_trials' = num_trials)
return(pmf_df)
}
num_trials <- 10
prob_success <- 0.7
num_successes <- 0:10  #manipulated variable
prob_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(f, "(", y[i], " | ", theta[1] == .(num_trials), ", ", theta[2] == .(prob_success), ")"))) +
scale_x_continuous(name = "Number of successes", breaks = seq(0, 10, 1)) +
theme_classic()
#create function that computes probability mass function with following arguments
##num_trials = number of trials (10  [coin flips] in the current example)
##prob_success = probability of success (or heads; 0.50 in the current example)
##num_successes = number of successes (or heads; [1-10] in the current example)
compute_binom_mass_density <- function(num_trials, prob_success, num_successes){
#computation of binomial term
num_success_patterns <- (factorial(num_trials)/(factorial(num_successes)*factorial(num_trials-num_successes)))
#computation of binomial term
prob_single_pattern <- (prob_success)^num_successes*(1-prob_success)^(num_trials-num_successes)
probability <- num_success_patterns*prob_single_pattern
pmf_df <- data.frame('probability' = probability,
'num_successes' = num_successes,
'prob_success' = prob_success,
'num_trials' = num_trials)
return(pmf_df)
}
num_trials <- 10
prob_success <- 0.7
num_successes <- 0:10  #manipulated variable
prob_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
library (tidyverse)
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(f, "(", y[i], " | ", theta[1] == .(num_trials), ", ", theta[2] == .(prob_success), ")"))) +
scale_x_continuous(name = "Number of successes", breaks = seq(0, 10, 1)) +
theme_classic()
factorial(10)/(factorial(6)*factorial(4))
210*(0.5)^10
factorial(100)/(factorial(60)*factorial(40))
(factorial(100)/(factorial(60)*factorial(40)))*(0.5)^100
(0.5)^60*(0.5)^40
1.374623e+28*7.888609e-31
compute_binom_mass_density <- function(num_trials, prob_success, num_successes){
#computation of binomial term (i.e., )
num_success_patterns <- (factorial(num_trials)/(factorial(num_successes)*factorial(num_trials-num_successes)))
#computation of the number of possible ways of obtaining a given number of successes (i.e., heads)
prob_single_pattern <- (prob_success)^num_successes*(1-prob_success)^(num_trials-num_successes)
probability <- num_success_patterns*prob_single_pattern
pmf_df <- data.frame('probability' = probability,
'num_successes' = num_successes,
'prob_success' = prob_success,
'num_trials' = num_trials)
return(pmf_df)
}
compute_binom_mass_density(num_trials = 100, num_successes = 60, prob_success = 0.5)
compute_binom_mass_density(num_trials = 100, num_successes = 40, prob_success = 0.5)
compute_binom_mass_density(num_trials = 10, num_successes = 4, prob_success = 0.5)
compute_binom_mass_density(num_trials = 100, num_successes = 60, prob_success = 0.5)
library (tidyverse)
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(f, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = "Number of successes", breaks = seq(0, 10, 1)) +
theme_classic()
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = "Number of successes", breaks = seq(0, 10, 1)) +
theme_classic()
num_trials <- 10
prob_success <- 0.5
num_successes <- 0:10  #manipulated variable
compute_binom_mass_density(num_trials = 100, num_successes = 60, prob_success = 0.5)
prob_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
library (tidyverse)
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = "Number of Heads (i.e., Successes)", breaks = seq(0, 10, 1)) +
theme_classic()
ggsave(filename = 'images/pmf_plot.png', plot = pmf_plot, width = 8, height = 6)
pmf_plot <- ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = "Number of Heads (i.e., Successes)", breaks = seq(0, 10, 1)) +
theme_classic()
ggsave(filename = 'images/pmf_plot.png', plot = pmf_plot, width = 8, height = 6)
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name =  expression("Italicized (i.e., "~italic("h")")")) +
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name =  expression("Number of Heads (i.e., "~italic("h")")")) +
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name =  expression("Number of Heads (i.e., "~italic(h)")")) +
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name =  expression("Number of Heads (i.e., ")) +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name =  expression("Number of Heads (i.e., "~italic(h)")")) +
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name =  expression("Number of Heads (i.e., "~italic(h)~")")) +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name =  expression("Number of Heads (i.e.,"~italic(h)")")) +
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name =  expression("Number of Heads (i.e.,"italic(h)")")) +
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name =  bquote(italic("Number of Heads (i.e.,  ")*.(italic("m"))~")")) +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote(italic("Italicized ")*.(italic("m"))~"pg"))  +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
library(grDevices) #needed for italic()
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote(italic("Italicized ")*.(italic("m"))~"pg"))  +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote(italic("Italicized ")(italic("m"))~"pg"))  +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e. "(italic("h"))")"))  +
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e. "italic("h")")"))  +
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e. "))  +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e. ")~italic("m")~)  +
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e. ")*italic("m")~)  +
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e. ")*.italic("m")~)  +
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e. ")*.(italic("m")))  +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote(italic("Italicized ")*.(italic("m"))~"pg")) +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote(italic("Italicized ")*(italic("m"))~"pg")) +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Italicized "*(italic("m"))~"pg")) +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*(italic("m"))~")")) +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("m")~")")) +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")")) +
theme_classic(base_family = "Helvetica") +
theme(axis.text.y = element_text(face = 'italic'))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")")) +
theme_classic(base_family = "Helvetica") +
theme(axis.title.y = element_text(face = 'italic'))
#create pmf plot
pmf_plot <- ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")")) +
theme_classic(base_family = "Helvetica") +
theme(axis.title.y = element_text(face = 'italic'))
ggsave(filename = "images/pmf_plot.png", plot = pmf_plot, width = 8, height = 6)
#create pmf plot
pmf_plot <- ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")")) +
theme_classic(base_family = "Helvetica", base_size = 24) +
theme(axis.title.y = element_text(face = 'italic'))
ggsave(filename = "images/pmf_plot.png", plot = pmf_plot, width = 8, height = 6)
#create pmf plot
pmf_plot <- ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")")) +
theme_classic(base_family = "Helvetica", base_size = 18) +
theme(axis.title.y = element_text(face = 'italic'))
ggsave(filename = "images/pmf_plot.png", plot = pmf_plot, width = 8, height = 6)
<div class= "figure"> <caption class = "figTop"> <span class="figLabel">Figure \ref{fig:prob-mass-binom}</span> <br> <span class = "figTitle"> <em>Binomial Distribution With Unbiased Coin </em></span> </caption> <img src=images/pmf_plot.png width="75%" height="75%"> <span class="figNote"><em>Note. </em></span> </div>
#create pmf plot
pmf_plot <- ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line() +
#scale_y_continuous(name = expression(paste(f~group("(", y[i], "," theta == 0.7, ")")))) +
scale_y_continuous(name = bquote(paste(P, "(", h, " | ", theta == .(prob_success), ", ", n == .(num_trials), ")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")")) +
theme_classic(base_family = "Helvetica", base_size = 18) +
theme(axis.title.y = element_text(face = 'italic'))
ggsave(filename = "images/pmf_plot.png", plot = pmf_plot, width = 8, height = 6)
4.5*2.2
280*0.7
1149.2*2
2298.4 - 1125
1173.4 - 200
973.4 - 300
650 - 400
25*40*50
19*40*50
